#include <iostream>#include <stack>#include "cstring"using namespace std;#define N 8  //Eight units.bool isocupy[8] = { 0 };//This line has been occupied.struct queen{//Each queen's path.    int x;    int y;};stack <queen> s, temp;char pic[8][8] = { '.' };//To output image.int n = 0;//Probable numbers.bool judge(int x, int y);//Main Judge.void sovled();void print();//Print all path.int main(){    memset(pic, '.', sizeof(pic));    sovled();}void sovled(){    if (s.empty()){ //If this stack is empty.        queen temp_q;        temp_q.x = 0;        for (temp_q.y = 0; temp_q.y < 8; temp_q.y++){            s.push(temp_q);            isocupy[temp_q.y] = true;            sovled();            s.pop();            isocupy[temp_q.y] = false;        }    }    else{        if (s.size() == 8){//If this stack is full.            temp = s;            n++;            print();            return;        }        else{            queen temp_q;            temp_q.x = s.top().x + 1;            for (temp_q.y = 0; temp_q.y < 8; temp_q.y++){                if (judge(temp_q.x, temp_q.y)){                    s.push(temp_q);                    isocupy[temp_q.y] = true;                    sovled();                    s.pop();                    isocupy[temp_q.y] = false;                }            }        }    }}bool judge(int x, int y){    stack <queen> temp_ = s;    while (!temp_.empty()){        queen temp_q = temp_.top();        if (isocupy[y] || (abs(temp_q.x - x) == abs(temp_q.y - y)))            return false;        temp_.pop();    }    return true;}void print(){    for (int i = 0; i < 8; i++){        pic[temp.top().x][temp.top().y] = 'X';        temp.pop();    }    for (int i = 0; i < 8; i++){        cout << endl;        for (int j = 0; j < 8; j++)            cout << pic[i][j] << " ";    }    cout << endl << "----------------" << endl;    memset(pic, '.', sizeof(pic));    cout << "n= " << n << endl;}